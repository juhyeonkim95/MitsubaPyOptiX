SAMPLE_UNIFORM = 0
SAMPLE_BRDF = 1
SAMPLE_MIS = 2
SAMPLE_Q_COS_INVERSION = 3
SAMPLE_Q_COS_REJECT = 4
SAMPLE_Q_COS_REJECT_MIX = 5

SAMPLE_METHOD_DICT = {
	"brdf": SAMPLE_BRDF,
	"bsdf": SAMPLE_BRDF,
	"mis": SAMPLE_MIS,
	"qcos_inversion": SAMPLE_Q_COS_INVERSION,
	"qcos_reject": SAMPLE_Q_COS_REJECT,
	"reject": SAMPLE_Q_COS_REJECT,
	"q_cos_reject_mix": SAMPLE_Q_COS_REJECT,
	"reject_mix": SAMPLE_Q_COS_REJECT,
}

# SAMPLE_Q_COS_MCMC= 4
# SAMPLE_Q_COS_REJECT=5
# SAMPLE_Q_SPHERE=6
# SAMPLE_Q_QUADTREE=7
# SAMPLE_Q_COS_REJECT_MIX=8
#SAMPLE_Q_HG_PROPORTION = 3


Q_UPDATE_EXPECTED_SARSA = 0
Q_UPDATE_SARSA = 1
Q_UPDATE_MONTE_CARLO = 2

Q_UPDATE_METHOD_DICT = {
	"mc": Q_UPDATE_MONTE_CARLO,
	"sarsa": Q_UPDATE_SARSA,
	"expected_sarsa": Q_UPDATE_EXPECTED_SARSA
}

SPATIAL_DATA_STRUCTURE_VOXEL = 0
SPATIAL_DATA_STRUCTURE_OCTREE = 1
SPATIAL_DATA_STRUCTURE_BINARY_TREE = 2
SPATIAL_DATA_STRUCTURE_DICT = {
	"grid": SPATIAL_DATA_STRUCTURE_VOXEL,
	"voxel": SPATIAL_DATA_STRUCTURE_VOXEL,
	"octree": SPATIAL_DATA_STRUCTURE_OCTREE,
	"binary_tree": SPATIAL_DATA_STRUCTURE_BINARY_TREE
}

DIRECTIONAL_DATA_STRUCTURE_GRID = 0
DIRECTIONAL_DATA_STRUCTURE_QUADTREE = 1
DIRECTIONAL_DATA_STRUCTURE_DICT = {
	"grid": DIRECTIONAL_DATA_STRUCTURE_GRID,
	"quadtree": DIRECTIONAL_DATA_STRUCTURE_QUADTREE,
	"quad_tree": DIRECTIONAL_DATA_STRUCTURE_QUADTREE,
}

DIRECTION_UV_MAPPING_SHIRLEY = 0
DIRECTION_UV_MAPPING_CYLINDRICAL = 1
DIRECTION_UV_MAPPING_DICT = {
	"shirley": DIRECTION_UV_MAPPING_SHIRLEY,
	"cylindrical": DIRECTION_UV_MAPPING_CYLINDRICAL
}

#define DIRECTION_UV_MAPPING_TYPE 0
# Q_SAMPLE_PROPORTIONAL_TO_Q = 1
# Q_SAMPLE_PROPORTIONAL_TO_Q_SQUARE = 2


def key_value_to_int(key, value):
	if isinstance(value, int):
		return value
	if key == "spatial_data_structure_type":
		return SPATIAL_DATA_STRUCTURE_DICT[value]
	elif key == "directional_data_structure_type":
		return DIRECTIONAL_DATA_STRUCTURE_DICT[value]
	elif key == "directional_mapping_method":
		return DIRECTION_UV_MAPPING_DICT[value]
	elif key == "sampling_strategy":
		return SAMPLE_METHOD_DICT[value]
	elif key == "q_table_update_method":
		return Q_UPDATE_METHOD_DICT[value]
	else:
		return value


def process_config(configs):
	for k, v in configs.items():
		configs[k] = key_value_to_int(k, v)
